#! /usr/bin/env ruby

require "pg"
require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def add_expense(amount, memo)
    date = Date.today
    @connection.exec_params("INSERT INTO expenses (amount, memo, created_on) VALUES($1, $2, $3);", [amount, memo, date])
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    display(result)
  end

  def delete_expense(id)
    result = @connection.exec_params("SELECT * FROM expenses WHERE id = $1;", [id])
    if result.ntuples != 1
      abort "There is no expense with the id '#{id}'."
    end
    @connection.exec_params("DELETE FROM expenses WHERE id = $1;", [id])
    puts "The following expense has been deleted:"
    display(result)
  end

  def search_expenses(query)
    result = @connection.exec_params("SELECT * FROM expenses WHERE memo ILIKE $1;", ["%#{query}%"])
    display(result)
  end

  private

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL,
          memo text NOT NULL,
          created_on date NOT NULL,
          CONSTRAINT positive_amount CHECK (amount >= 0.01)
        );
      SQL
    end
  end

  def display(result)
    count = result.ntuples
    case count
    when 0 then abort "There are no expenses."
    when 1 then puts "There is 1 expense."
    else        puts "There are #{count} expenses."
    end

    result.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]

      puts columns.join(" | ")
    end
    puts "-" * 50

    amount_total = result.field_values("amount").map(&:to_f).inject(:+)
    puts "Total " + amount_total.to_s.rjust(25)
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(inputs)
    command = inputs.shift
    case command
    when "add"
      amount, memo = inputs[0], inputs[1]
      if !valid_amount?(amount) || !valid_memo?(memo)
        abort "You must provide an amount and memo."
      end
      @application.add_expense(amount, memo)
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      answer = $stdin.getch.downcase
      answer == "y" ? @application.delete_all_expenses : abort
    when "list"
      @application.list_expenses
    when "delete"
      id = inputs[0]
      if !valid_id_integer(id)
        abort "You must provide an integer id."
      end
      @application.delete_expense(id)
    when "search"
      query = inputs[0]
      @application.search_expenses(query)
    else
      display_help
    end
  end

  private

  def valid_amount?(amount)
    !amount.nil? && amount =~ /\A\d{1,4}\.\d{2}\z/ && amount.to_f.positive?
  end

  def valid_memo?(memo)
    !memo.nil? && memo.chr =~ /\S/
  end

  def valid_id_integer(id)
    !id.nil? && id =~ /\A\d+\z/
  end

  def display_help
    help_options = <<~TEXT
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    TEXT

    puts help_options
  end
end

tracker = CLI.new
tracker.run(ARGV)
